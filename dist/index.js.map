{"version":3,"sources":["../src/index.ts","../src/commands/init.ts","../src/commands/cover.ts","../src/lib/config.ts","../src/lib/coverage.ts","../src/lib/git.ts","../src/commands/impacted.ts","../src/commands/run.ts","../src/commands/report.ts","../src/commands/upload.ts"],"sourcesContent":["#!/usr/bin/env node\nimport { Command } from 'commander';\nimport { initCommand } from './commands/init.js';\nimport { coverCommand } from './commands/cover.js';\nimport { impactedCommand } from './commands/impacted.js';\nimport { runCommand } from './commands/run.js';\nimport { diffCoverageCommand } from './commands/report.js';\nimport { uploadCommand } from './commands/upload.js';\n\nconst program = new Command();\nprogram\n  .name('tia-cli')\n  .description('ImpactCov: Test Impact Analysis & Coverage Mapping CLI')\n  .version('0.1.0');\n\nprogram\n  .command('init')\n  .description('Create a starter impactcov.config.json')\n  .action(async () => {\n    await initCommand();\n  });\n\nprogram\n  .command('cover')\n  .argument('[test-pattern]', 'Optional test pattern')\n  .description('Run tests with per-test coverage and update coverage map cache')\n  .action(async (pattern) => {\n    await coverCommand(pattern);\n  });\n\nprogram\n  .command('impacted')\n  .description('List impacted tests for a diff')\n  .option('--since <gitref>', 'Base ref (default from config)')\n  .option('--diff <a..b>', 'Explicit diff range (not yet implemented)')\n  .option('--files <list>', 'Comma-separated changed files')\n  .option('--json', 'Emit JSON payload', false)\n  .action(async (opts) => {\n    const files = opts.files\n      ? String(opts.files)\n          .split(',')\n          .map((s) => s.trim())\n          .filter(Boolean)\n      : undefined;\n    await impactedCommand({ since: opts.since, diff: opts.diff, files, json: opts.json });\n  });\n\nprogram\n  .command('run')\n  .description('Run only impacted tests; fail-open to all tests if needed')\n  .option('--since <gitref>', 'Base ref (default from config)')\n  .option('--files <list>', 'Comma-separated changed files')\n  .option('--all-on-miss', 'Fallback to run all tests on miss (default true)')\n  .option('--report <path>', 'Write JSON summary report')\n  .action(async (opts) => {\n    const files = opts.files\n      ? String(opts.files)\n          .split(',')\n          .map((s: string) => s.trim())\n          .filter(Boolean)\n      : undefined;\n    await runCommand({ since: opts.since, files, allOnMiss: opts.allOnMiss, report: opts.report });\n  });\n\nconst report = program.command('report').description('Reporting utilities');\nreport\n  .command('diff-coverage')\n  .option('--since <gitref>', 'Base ref (default from config)')\n  .option('--threshold <n>', 'Percent threshold', (v) => Number(v))\n  .description('Check changed-lines coverage against a threshold')\n  .action(async (opts) => {\n    await diffCoverageCommand(opts);\n  });\n\nprogram\n  .command('upload')\n  .description('Upload build/coverage metadata to API endpoint')\n  .option('--build <id>', 'Build id')\n  .option('--endpoint <url>', 'API endpoint (overrides config)')\n  .option('--token <token>', 'Project token (overrides config)')\n  .action(async (opts) => {\n    await uploadCommand(opts);\n  });\n\n// Ensure we don't drop the returned promise\nvoid program.parseAsync(process.argv);\n","import fs from 'fs-extra';\nimport path from 'path';\nimport { ImpactCovConfig } from '../types.js';\n\nexport async function initCommand() {\n  const p = path.join(process.cwd(), 'impactcov.config.json');\n  const exists = await fs.pathExists(p);\n  if (exists) {\n    console.log('impactcov.config.json already exists.');\n    return;\n  }\n  const cfg: ImpactCovConfig = {\n    project: 'app',\n    language: 'javascript',\n    monorepo: false,\n    test: { framework: 'jest', command: 'npm test --' },\n    coverage: { tool: 'istanbul', perTest: true },\n    impact: {\n      defaultSince: 'origin/main',\n      fallbackRunAll: true,\n      fileGranularity: 'line',\n      diffCoverageThreshold: 85,\n    },\n    ci: { provider: 'github' },\n    upload: { enabled: true, artifacts: ['.impactcov/coverage-map.jsonl'] },\n  };\n  await fs.writeFile(p, JSON.stringify(cfg, null, 2) + '\\n', 'utf8');\n  console.log('Created impactcov.config.json');\n}\n","import { execa } from 'execa';\nimport { loadConfig } from '../lib/config.js';\nimport { addCoverageRecords } from '../lib/coverage.js';\n\nexport async function coverCommand(testPattern?: string) {\n  const cfg = await loadConfig();\n  console.log('Running tests with coverage (stub)...');\n  // In a real implementation, we'd hook Istanbul per-test here.\n  // For scaffold, we just run the user's test command and add a sample mapping for demo.\n  const parts = cfg.test.command.split(' ');\n  const cmd = parts[0];\n  const args = parts.slice(1);\n  if (testPattern) args.push(testPattern);\n  try {\n    await execa(cmd, args, { stdio: 'inherit', env: cfg.test.env });\n  } catch {\n    console.warn('Test command exited with non-zero code; continuing.');\n  }\n  await addCoverageRecords([\n    { testId: 'Auth › logs in', file: 'src/auth/login.ts', lines: [10, 11, 12] },\n    { testId: 'Cart › adds item', file: 'src/cart/add.ts', lines: [5, 6, 7] },\n    { testId: 'Cart › removes item', file: 'src/cart/remove.ts', lines: [14, 15] },\n  ]);\n  console.log('Per-test coverage map updated at .impactcov/coverage-map.jsonl');\n}\n","import fs from 'fs-extra';\nimport path from 'path';\nimport { z } from 'zod';\nimport { ImpactCovConfig } from '../types.js';\n\nconst Schema = z.object({\n  project: z.string(),\n  language: z.string().optional(),\n  monorepo: z.boolean().optional(),\n  packages: z.array(z.string()).optional(),\n  test: z.object({\n    framework: z.string(),\n    command: z.string(),\n    testMatch: z.array(z.string()).optional(),\n    env: z.record(z.string()).optional(),\n  }),\n  coverage: z.object({\n    tool: z.string(),\n    perTest: z.boolean(),\n    include: z.array(z.string()).optional(),\n    exclude: z.array(z.string()).optional(),\n  }),\n  impact: z\n    .object({\n      defaultSince: z.string().optional(),\n      fallbackRunAll: z.boolean().optional(),\n      fileGranularity: z.enum(['file', 'line']).optional(),\n      diffCoverageThreshold: z.number().optional(),\n    })\n    .optional(),\n  ci: z\n    .object({\n      provider: z.string().optional(),\n      projectToken: z.string().optional(),\n      endpoint: z.string().optional(),\n    })\n    .optional(),\n  upload: z\n    .object({\n      enabled: z.boolean().optional(),\n      artifacts: z.array(z.string()).optional(),\n    })\n    .optional(),\n});\n\nexport async function loadConfig(cwd = process.cwd()): Promise<ImpactCovConfig> {\n  const p = path.join(cwd, 'impactcov.config.json');\n  const exists = await fs.pathExists(p);\n  if (!exists) {\n    throw new Error('impactcov.config.json not found. Run `tia-cli init` to create one.');\n  }\n  const json = await fs.readFile(p, 'utf8');\n  const parsed = JSON.parse(json);\n  return Schema.parse(parsed);\n}\n","import fs from 'fs-extra';\nimport path from 'path';\nimport { appendLines, CACHE_MAP, ensureDotDir } from './fsutils.js';\nimport { TestCoverageRecord } from '../types.js';\n\nexport async function loadCoverageMap(): Promise<TestCoverageRecord[]> {\n  const exists = await fs.pathExists(CACHE_MAP);\n  if (!exists) return [];\n  const text = await fs.readFile(CACHE_MAP, 'utf8');\n  return text\n    .split('\\n')\n    .filter(Boolean)\n    .map((line) => JSON.parse(line));\n}\n\nexport async function addCoverageRecords(records: TestCoverageRecord[]) {\n  await ensureDotDir();\n  const lines = records.map((r) => JSON.stringify(r));\n  await appendLines(CACHE_MAP, lines);\n}\n\nexport function intersectByFiles(changed: string[], map: TestCoverageRecord[]): string[] {\n  const set = new Set<string>(changed.map((f) => path.normalize(f)));\n  const impacted = new Set<string>();\n  for (const r of map) {\n    for (const f of set) {\n      if (r.file.endsWith(f)) {\n        impacted.add(r.testId);\n      }\n    }\n  }\n  return Array.from(impacted);\n}\n","import { execa } from 'execa';\n\nexport async function getChangedFiles(base: string): Promise<string[]> {\n  const { stdout } = await execa('git', ['diff', '--name-only', `${base}...HEAD`], {\n    stdio: 'pipe',\n  });\n  return stdout.split('\\n').filter(Boolean);\n}\n\nexport async function getHeadCommit(): Promise<string> {\n  const { stdout } = await execa('git', ['rev-parse', 'HEAD'], { stdio: 'pipe' });\n  return stdout.trim();\n}\n\nexport async function getBranch(): Promise<string> {\n  const { stdout } = await execa('git', ['rev-parse', '--abbrev-ref', 'HEAD'], { stdio: 'pipe' });\n  return stdout.trim();\n}\n\nexport async function getRepo(): Promise<string> {\n  const { stdout } = await execa('git', ['config', '--get', 'remote.origin.url'], {\n    stdio: 'pipe',\n  });\n  return stdout.trim();\n}\n","import { loadConfig } from '../lib/config.js';\nimport { getChangedFiles } from '../lib/git.js';\nimport { loadCoverageMap, intersectByFiles } from '../lib/coverage.js';\n\nexport async function impactedCommand(opts: {\n  since?: string;\n  diff?: string;\n  files?: string[];\n  json?: boolean;\n}) {\n  const cfg = await loadConfig();\n  const base = opts.since || cfg.impact?.defaultSince || 'origin/main';\n  const changed = opts.files?.length ? opts.files : await getChangedFiles(base);\n  const map = await loadCoverageMap();\n  const tests = intersectByFiles(changed, map);\n  const payload = { base, changed, impactedTests: tests, coverageRecords: map.length };\n  if (opts.json) {\n    console.log(JSON.stringify(payload, null, 2));\n  } else {\n    console.log(`Base: ${base}`);\n    console.log(`Changed files (${changed.length}):`);\n    for (const f of changed) console.log(`  - ${f}`);\n    console.log(`\\nImpacted tests (${tests.length}):`);\n    for (const t of tests) console.log(`  - ${t}`);\n  }\n}\n","import { loadConfig } from '../lib/config.js';\nimport { impactedCommand } from './impacted.js';\nimport { execa } from 'execa';\n\nexport async function runCommand(opts: {\n  since?: string;\n  files?: string[];\n  allOnMiss?: boolean;\n  report?: string;\n}) {\n  const cfg = await loadConfig();\n  const res = await (async () => {\n    const base = opts.since || cfg.impact?.defaultSince || 'origin/main';\n    const files = opts.files;\n    const json = await capture(() => impactedCommand({ since: base, files, json: true }));\n    const { impactedTests } = JSON.parse(json);\n    return { tests: impactedTests as string[], base };\n  })();\n\n  let testsToRun = res.tests;\n  if (!testsToRun.length && (opts.allOnMiss ?? cfg.impact?.fallbackRunAll ?? true)) {\n    console.log('No impacted tests found; falling back to running all tests.');\n    testsToRun = [];\n  }\n\n  const parts = cfg.test.command.split(' ');\n  const cmd = parts[0];\n  const args = parts.slice(1);\n  if (testsToRun.length) {\n    args.push(testsToRun[0]);\n  }\n  const started = Date.now();\n  try {\n    await execa(cmd, args, { stdio: 'inherit', env: cfg.test.env });\n  } catch {\n    console.warn('Test command exited non-zero; preserving exit for CI diagnostics.');\n  }\n  const durationMs = Date.now() - started;\n  const summary = {\n    testsRun: testsToRun.length || undefined,\n    durationMs,\n    base: res.base,\n  };\n  if (opts.report) {\n    const { writeJSON } = await import('../lib/fsutils.js');\n    await writeJSON(opts.report, summary);\n  }\n  console.log(`Run summary: ${JSON.stringify(summary, null, 2)}`);\n}\n\nasync function capture(fn: () => Promise<void>) {\n  const { Writable } = await import('node:stream');\n  let buf = '';\n  const _log = console.log;\n  const writable = new Writable({\n    write(chunk, _enc, cb) {\n      buf += chunk.toString();\n      cb();\n    },\n  });\n  console.log = (...args: unknown[]) => writable.write(args.join(' ') + '\\n');\n  try {\n    await fn();\n  } finally {\n    console.log = _log;\n    writable.end();\n  }\n  return buf;\n}\n","import { loadConfig } from '../lib/config.js';\nimport { loadCoverageMap } from '../lib/coverage.js';\n\nexport async function diffCoverageCommand(opts: { since?: string; threshold?: number }) {\n  const cfg = await loadConfig();\n  const threshold = opts.threshold ?? cfg.impact?.diffCoverageThreshold ?? 80;\n  const map = await loadCoverageMap();\n  const coveredChangedLines = map.length * 10; // placeholder\n  const totalChangedLines = coveredChangedLines + 10;\n  const pct = Math.round((coveredChangedLines / totalChangedLines) * 100);\n\n  const result = { diffCoverage: pct, threshold, pass: pct >= threshold };\n  console.log(JSON.stringify(result, null, 2));\n  if (!result.pass) process.exitCode = 2;\n}\n","import { loadConfig } from '../lib/config.js';\nimport { getHeadCommit, getBranch, getRepo } from '../lib/git.js';\nimport { writeJSON, LOCAL_REPORT } from '../lib/fsutils.js';\nimport { BuildPayload } from '../types.js';\nimport { fetch } from 'undici';\n\nexport async function uploadCommand(opts: { build?: string; endpoint?: string; token?: string }) {\n  const cfg = await loadConfig();\n  const commit = await getHeadCommit();\n  const branch = await getBranch();\n  const repo = await getRepo();\n\n  const payload: BuildPayload = {\n    build: { id: opts.build, commit, branch, repo },\n    stats: { durationMs: 0 },\n  };\n  await writeJSON(LOCAL_REPORT, payload);\n\n  const endpoint = opts.endpoint || cfg.ci?.endpoint;\n  const token = opts.token || cfg.ci?.projectToken;\n\n  if (!endpoint) {\n    console.log('No endpoint configured; skipping upload. Report saved at .impactcov/report.json');\n    return;\n  }\n  const res = await fetch(endpoint + '/ingest', {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json',\n      ...(token ? { authorization: `Bearer ${token}` } : {}),\n    },\n    body: JSON.stringify(payload),\n  });\n  if (!res.ok) {\n    console.warn(`Upload failed with status ${res.status}.`);\n    process.exitCode = 11;\n  } else {\n    console.log('Upload succeeded.');\n  }\n}\n"],"mappings":"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","names":["fs","path","fs","path","fs","path","execa","execa","writeJSON"]}