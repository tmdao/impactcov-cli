#!/usr/bin/env node
import { Command } from 'commander';
import { initCommand } from './commands/init.js';
import { coverCommand } from './commands/cover.js';
import { impactedCommand } from './commands/impacted.js';
import { runCommand } from './commands/run.js';
import { diffCoverageCommand } from './commands/report.js';
import { uploadCommand } from './commands/upload.js';

const program = new Command();
program
  .name('tia-cli')
  .description('ImpactCov: Test Impact Analysis & Coverage Mapping CLI')
  .version('0.1.0');

program
  .command('init')
  .description('Create a starter impactcov.config.json')
  .action(async () => {
    await initCommand();
  });

program
  .command('cover')
  .argument('[test-pattern]', 'Optional test pattern')
  .option('--no-coverage-filter', 'Disable include/exclude filtering when recording per-test coverage')
  .option('--coverage-provider <name>', 'Override coverage provider (Vitest only): istanbul or v8')
  .option('--strict-provider', 'Fail if provider != istanbul for Vitest')
  .description('Run tests with per-test coverage and update coverage map cache')
  .action(async (pattern, opts: { coverageFilter?: boolean; coverageProvider?: string; strictProvider?: boolean }) => {
    const noFilter = opts && Object.prototype.hasOwnProperty.call(opts, 'coverageFilter') && opts.coverageFilter === false;
    await coverCommand(pattern, { noFilter, coverageProvider: opts.coverageProvider, strictProvider: Boolean(opts.strictProvider) });
  })
  .addHelpText(
    'after',
    [
      '',
      'Examples:',
      '  $ tia-cli cover',
      '  $ tia-cli cover "packages/app/src/**/*.test.ts"',
      '  $ tia-cli cover --no-coverage-filter',
      '  $ tia-cli cover --coverage-provider v8',
      '  $ tia-cli cover --coverage-provider v8 --strict-provider',
      '',
      'Notes:',
      '  - Frameworks: Mocha (require-hook), Jest (setupFilesAfterEnv), Vitest (setupFiles).',
      '  - Include/Exclude globs are read from impactcov.config.json and matched with micromatch.',
      '  - Vitest per-test mapping requires --coverage.provider=istanbul. Use --strict-provider to fail-fast otherwise.',
      '',
    ].join('\n'),
  );

program
  .command('impacted')
  .description('List impacted tests for a diff')
  .option('--since <gitref>', 'Base ref (default from config)')
  .option('--diff <a..b>', 'Explicit diff range (not yet implemented)')
  .option('--files <list>', 'Comma-separated changed files')
  .option('--json', 'Emit JSON payload', false)
  .action(async (opts: { since?: string; diff?: string; files?: string; json?: boolean }) => {
    const files = opts.files
      ? opts.files
          .split(',')
          .map((s) => s.trim())
          .filter(Boolean)
      : undefined;
    const since = typeof opts.since === 'string' ? opts.since : undefined;
    const diff = typeof opts.diff === 'string' ? opts.diff : undefined;
    const jsonFlag = Boolean(opts.json);
    const impactedOpts: Parameters<typeof impactedCommand>[0] = {
      since,
      diff,
      files,
      json: jsonFlag,
    };
    await impactedCommand(impactedOpts);
  })
  .addHelpText(
    'after',
    [
      '',
      'Examples:',
      '  $ tia-cli impacted --since origin/main',
      '  $ tia-cli impacted --files src/a.ts,src/b.ts',
      '  $ tia-cli impacted --since origin/main --json',
      '',
      'Notes:',
      '  - Computes changed files from git diff to the base ref unless --files is provided.',
      '  - Relies on the per-test coverage map at .impactcov/coverage-map.jsonl (generated by `tia-cli cover`).',
      '  - The --diff option is reserved and not yet implemented.',
      '',
    ].join('\n'),
  );

program
  .command('run')
  .description('Run only impacted tests; fail-open to all tests if needed')
  .option('--since <gitref>', 'Base ref (default from config)')
  .option('--files <list>', 'Comma-separated changed files')
  .option('--all-on-miss', 'Fallback to run all tests on miss (default true)')
  .option('--report <path>', 'Write JSON summary report')
  .action(async (opts: { since?: string; files?: string; allOnMiss?: boolean; report?: string }) => {
    const files = opts.files
      ? opts.files
          .split(',')
          .map((s: string) => s.trim())
          .filter(Boolean)
      : undefined;
    await runCommand({ since: opts.since, files, allOnMiss: opts.allOnMiss, report: opts.report });
  })
  .addHelpText(
    'after',
    [
      '',
      'Examples:',
      '  $ tia-cli run --since origin/main',
      '  $ tia-cli run --files src/a.ts,src/b.ts',
      '  $ tia-cli run --since origin/main --report impactcov.json',
      '',
      'Notes:',
      '  - Runs only impacted tests based on the current coverage map; if none and fallback is enabled, runs all tests.',
      '  - Uses your configured test command from impactcov.config.json.',
      '  - --report writes a small JSON summary with testsRun, durationMs, and base ref.',
      '',
    ].join('\n'),
  );

const report = program.command('report').description('Reporting utilities');
report
  .command('diff-coverage')
  .option('--since <gitref>', 'Base ref (default from config)')
  .option('--threshold <n>', 'Percent threshold', (v) => Number(v))
  .description('Check changed-lines coverage against a threshold')
  .action(async (opts: { since?: string; threshold?: number }) => {
    await diffCoverageCommand(opts);
  });

program
  .command('upload')
  .description('Upload build/coverage metadata to API endpoint')
  .option('--build <id>', 'Build id')
  .option('--endpoint <url>', 'API endpoint (overrides config)')
  .option('--token <token>', 'Project token (overrides config)')
  .action(async (opts: { build?: string; endpoint?: string; token?: string }) => {
    await uploadCommand(opts);
  })
  .addHelpText(
    'after',
    [
      '',
      'Examples:',
      '  $ tia-cli upload --build $GITHUB_RUN_ID',
      '  $ tia-cli upload --endpoint http://localhost:3000 --token dev-token',
      '',
      'Notes:',
      '  - Writes a local report to .impactcov/report.json before upload.',
      '  - If no endpoint is configured/provided, it skips upload and keeps the local report.',
      '  - Non-2xx responses set exit code 11.',
      '',
    ].join('\n'),
  );

// Ensure we don't drop the returned promise
void program.parseAsync(process.argv);
